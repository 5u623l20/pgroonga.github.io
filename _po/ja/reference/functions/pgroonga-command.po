msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"PO-Revision-Date: 2015-11-09 11:18+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: pgroonga.command function\n"
"---"
msgstr ""
"---\n"
"title: pgroonga.command関数\n"
"---"

msgid "# `pgroonga.command` function"
msgstr "# `pgroonga.command`関数"

msgid "## Summary"
msgstr "## 概要"

msgid ""
"`pgroonga.command` function executes a [Groonga command](http://groonga.org/do"
"cs/reference/command.html) and returns the result as `text` type value."
msgstr ""
"`pgroonga.command`関数は[Groongaのコマンド](http://groonga.org/ja/docs/reference/comma"
"nd.html)を実行して`text`型の値として結果を返します。"

msgid "## Syntax"
msgstr "## 構文"

msgid "Here is the syntax of this function:"
msgstr "この関数の構文は次の通りです。"

msgid ""
"```text\n"
"text pgroonga.command(command)\n"
"```"
msgstr ""

msgid ""
"`command` is a `text` type value. `pgroonga.command` executes `command` as a G"
"roonga command."
msgstr "`command`は`text`型の値です。`pgroonga.command`は`command`をGroongaのコマンドとして実行します。"

msgid ""
"Groonga command returns result as JSON. `pgroonga.command` returns the JSON as"
" `text` type value. You can use [JSON functions and operations provided by Pos"
"tgreSQL](https://www.postgresql.org/docs/{{ site.postgresql_short_version }}/s"
"tatic/functions-json.html) by casting the result to `json` or `jsonb` type."
msgstr ""
"Groongaのコマンドは結果をJSONとして返します。`pgroonga.command`はJSONを`text`型の値として返します。結果を`json`"
"型か`jsonb`型にキャストすると[PostgreSQLが提供するJSON関数・演算](http://www.postgresql.jp/document"
"/{{ site.postgresql_short_version }}/html/functions-json.html)を使うことができます。"

msgid "## Usage"
msgstr "## 使い方"

msgid "See [examples in tutorial](../../tutorial/#groonga)."
msgstr "[チュートリアルの例](../../tutorial/#groonga)も参照してください。"

msgid "## Attention for `select` Groonga command {#attention}"
msgstr "## Groongaの`select`コマンドに関する注意事項 {#attention}"

msgid ""
"You need to take care about invalid records when you use [`select` Groonga com"
"mand](http://groonga.org/docs/reference/commands/select.html)."
msgstr ""
"[Groongaの`select`コマンド](http://groonga.org/ja/docs/reference/commands/select.ht"
"ml)を使うとき、不正なレコードについて注意する必要があります。"

msgid ""
"You may get invalid records when PGroonga index target table processed one or "
"more `DELETE` or `UPDATE` after last `VACUUM`. There are deleted and/or old re"
"cords exist in Groonga table for the case. If there are deleted or old records"
", `select` Groonga command may return them."
msgstr ""
"最後の`VACUUM`のあと、PGroongaのインデックス対象のテーブルに対して1回以上`DELETE`または`UPDATE`が発生すると不正なレコードが"
"返ることがあります。この状態のとき、Groongaのテーブルには削除されたレコードまたは古いレコードが存在します。Groongaの`select`コマンドは"
"これらの削除されたレコード・古いレコードを返すことがあります。"

msgid "The followings show this case by example."
msgstr "このケースを例で説明します。"

msgid "Here are sample schema and data for examples:"
msgstr "例に使うサンプルスキーマとデータは次の通りです。"

msgid ""
"```sql\n"
"CREATE TABLE posts (\n"
"  id integer PRIMARY KEY,\n"
"  title text,\n"
"  content text\n"
");"
msgstr ""

msgid ""
"CREATE INDEX pgroonga_posts_index\n"
"          ON posts\n"
"       USING pgroonga (id, title, content);"
msgstr ""

msgid ""
"INSERT INTO posts VALUES (1, 'PostgreSQL', 'PostgreSQL is a relational databas"
"e management system.');\n"
"INSERT INTO posts VALUES (2, 'Groonga', 'Groonga is a fast full text search en"
"gine that supports all languages.');\n"
"INSERT INTO posts VALUES (3, 'PGroonga', 'PGroonga is a PostgreSQL extension t"
"hat uses Groonga as index.');\n"
"```"
msgstr ""

msgid "Here is the result before updating. There are 3 records:"
msgstr "以下は更新前の結果です。3レコードあります。"

msgid ""
"```sql\n"
"SELECT *\n"
"  FROM json_array_elements(\n"
"         pgroonga.command('select ' ||\n"
"                          pgroonga.table_name('pgroonga_posts_index')\n"
"                         )::json->1->0);\n"
"--                                               value                        "
"                      \n"
"-- ---------------------------------------------------------------------------"
"----------------------\n"
"--  [3]\n"
"--  [[\"_id\",\"UInt32\"],[\"content\",\"LongText\"],[\"ctid\",\"UInt64\"],[\"id\",\"Int32\"],"
"[\"title\",\"LongText\"]]\n"
"--  [1,\"PostgreSQL is a relational database management system.\",1,1,\"PostgreSQ"
"L\"]\n"
"--  [2,\"Groonga is a fast full text search engine that supports all languages."
"\",2,2,\"Groonga\"]\n"
"--  [3,\"PGroonga is a PostgreSQL extension that uses Groonga as index.\",3,3,\"P"
"Groonga\"]\n"
"-- (5 rows)\n"
"```"
msgstr ""

msgid "Update 1 record:"
msgstr "1つのレコードを更新します。"

msgid ""
"```sql\n"
"UPDATE posts\n"
"   SET title = 'Mroonga',\n"
"       content = 'Mroonga is a MySQL storage engine that uses Groonga as backe"
"nd.'\n"
" WHERE id = 3;\n"
"```"
msgstr ""

msgid ""
"Executes `select` Groonga command again. It returns 4 records. 1 record is add"
"ed because there is the record before updating:"
msgstr "Groongaの`select`コマンドを再度実行します。4レコード返ります。1レコード増えています。これは、更新前のレコードが残っているからです。"

msgid ""
"```sql\n"
"SELECT *\n"
"  FROM json_array_elements(\n"
"         pgroonga.command('select ' ||\n"
"                          pgroonga.table_name('pgroonga_posts_index')\n"
"                         )::json->1->0);\n"
"--                                               value                        "
"                      \n"
"-- ---------------------------------------------------------------------------"
"----------------------\n"
"--  [4]\n"
"--  [[\"_id\",\"UInt32\"],[\"content\",\"LongText\"],[\"ctid\",\"UInt64\"],[\"id\",\"Int32\"],"
"[\"title\",\"LongText\"]]\n"
"--  [1,\"PostgreSQL is a relational database management system.\",1,1,\"PostgreSQ"
"L\"]\n"
"--  [2,\"Groonga is a fast full text search engine that supports all languages."
"\",2,2,\"Groonga\"]\n"
"--  [3,\"PGroonga is a PostgreSQL extension that uses Groonga as index.\",3,3,\"P"
"Groonga\"]\n"
"--  [4,\"Mroonga is a MySQL storage engine that uses Groonga as backend.\",4,3,\""
"Mroonga\"]\n"
"-- (6 rows)\n"
"```"
msgstr ""

msgid "The old record is deleted when `VACUUM` is executed."
msgstr "古いレコードは`VACUUM`実行時に削除されます。"

msgid ""
"Execute `VACUUM FULL` explicitly. And then execute `select` Groonga command ag"
"ain. It returns 3 records. There isn't the old record:"
msgstr ""
"明示的に`VACUUM FULL`を実行します。その後、Groongaの`select`コマンドを再度実行します。3レコード返ってきます。ここには古いレコー"
"ドはありません。"

msgid ""
"```sql\n"
"VACUUM FULL;\n"
"SELECT *\n"
"  FROM json_array_elements(\n"
"         pgroonga.command('select ' ||\n"
"                          pgroonga.table_name('pgroonga_posts_index')\n"
"                         )::json->1->0);\n"
"--                                               value                        "
"                      \n"
"-- ---------------------------------------------------------------------------"
"----------------------\n"
"--  [3]\n"
"--  [[\"_id\",\"UInt32\"],[\"content\",\"LongText\"],[\"ctid\",\"UInt64\"],[\"id\",\"Int32\"],"
"[\"title\",\"LongText\"]]\n"
"--  [1,\"PostgreSQL is a relational database management system.\",1,1,\"PostgreSQ"
"L\"]\n"
"--  [2,\"Groonga is a fast full text search engine that supports all languages."
"\",2,2,\"Groonga\"]\n"
"--  [3,\"Mroonga is a MySQL storage engine that uses Groonga as backend.\",3,3,\""
"Mroonga\"]\n"
"-- (5 rows)\n"
"```"
msgstr ""

msgid "## See also"
msgstr "## 参考"

msgid "  * [Examples in tutorial](../../tutorial/#groonga)"
msgstr "  * [チュートリアルにある例](../../tutorial/#groonga)"
